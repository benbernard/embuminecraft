os.loadAPI('/benpi')

function get_all_sorts()
   possible_sides = { "front", "back", "right", "left", "top", "bottom" }
   sorts = {}
   count = 0
   for i,side in ipairs(possible_sides)
   do
      if peripheral.isPresent(side) 
      then
         print(peripheral.getType(side))
         if(peripheral.getType(side) == "interactiveSorter") then
            count = count + 1
            s = peripheral.wrap(side)
            table.insert(sorts,count,s)
         end
      end
   end
   return sorts
end

function sendItem(target_item)
    sorts = get_all_sorts()
    for i,sorter in pairs(sorts) do
       for i=0,5 
       do
          if sorter.list(i) ~= nil then
             for itemid,count in pairs(sorter.list(i))
             do
                idnum = tonumber(itemid)
                print("comparing: " .. itemid)
                if(itemid == target_item) then
                   print("Item found!")
                   topSorter = peripheral.wrap("top");
                   topSorter.extract(i,itemid,1,1)
                          
                end
             end
          end
       end
    end
end

b = benpi.BenPI.new()
b:open_modem()

while true do
function onOffBottom()
   redstone.setOutput("bottom", true)
    event, sender, message, distance = os.pullEvent('rednet_message')
   redstone.setOutput("bottom", false)
    print("message: " .. message)
    if(string.sub(message,1,3) == "ref") then
       id=tonumber(string.sub(message,4))
       print("searching for " .. id)
       sendItem(id)
    end
    if(string.sub(message,1,3) == "XXX") then
       shell.exit()
    end
end
--658985989