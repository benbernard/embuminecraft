os.loadAPI('/benpi')

b = benpi.BenPI.new()
top_sorter = peripheral.wrap("top");
bottom_sorter = peripheral.wrap("bottom");

input_chest = 4
router_chest = 5
ref_repo = 3
from_router_chest = 1
output_chest = 2
misc = 5

desired_objects = {}

function pulse(direction)
   redstone.setOutput(direction, false);
   redstone.setOutput(direction, true);
   sleep(.5)
   redstone.setOutput(direction, false);
end

function onOffBottom()
   bottom = true
   while true do
      redstone.setOutput("bottom", bottom)
      sleep(2)
      bottom = not bottom
   end
end

function waitForEnter()
   read()
end

function waitForRefObject()
   while true do
      local chest_contents
      chest_contents = bottom_sorter.list(input_chest)
      if(next(chest_contents) == nil) then
         sleep(.5)
      else
         local id,num
         for id,num in pairs(chest_contents) do
            print(id)
            desired_objects[id] = 1
            bottom_sorter.extract(input_chest,id,router_chest,1)
            sleep(3)

            -- activate block construct/destructor
            pulse("back")

            sleep(3)
            
            for i=0,10 do
               --active filter from router
               pulse("left")
               sleep(.5)
            end
            sleep(4)
            print("done with first pass, check router")
            read()
         end
      end
   end
end

function waitForFromRouterObject()
   while true do
      local chest_contents
      chest_contents = top_sorter.list(from_router_chest)
      if(next(chest_contents) == nil) then
         sleep(.5)
      else
         local id,num
         for id,num in pairs(chest_contents) do
            if(desired_objects[id] == 1) then
               desired_objects[id] = 0
               top_sorter.extract(from_router_chest,id,ref_repo,1)
               top_sorter.extract(from_router_chest,id,output_chest, num-1)
            else
               top_sorter.extract(1,id,5,num)
            end
         end
      end
   end
end

print("ROUTER-RETRIEVE")
print("Press [enter] to exit.")
parallel.waitForAny(waitForRefObject, waitForFromRouterObject, waitForEnter, onOffBottom)
