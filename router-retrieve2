os.loadAPI('/benpi')

b = benpi.BenPI.new()
sorter = b:find_peripheral("interactiveSorter")
input_chest = 4
router_chest = 5
ref_repo = 3
from_router_chest = 1
output_chest = 2

function pulse(direction)
   redstone.setOutput(direction, false);
   redstone.setOutput(direction, true);
   sleep(.5)
   redstone.setOutput(direction, false);
end

function onOffBottom()
   bottom = true
   while true do
      redstone.setOutput("bottom", bottom)
      sleep(2)
      bottom = not bottom
   end
end

function waitForEnter()
   read()
end

function waitForRefObject()
   while true do
      chest_contents = sorter.list(input_chest)
      if(next(chest_contents) == nil) then
         sleep(.5)
      else
         for id,num in pairs(chest_contents) do
            print(id)
            sorter.extract(input_chest,id,router_chest,1)
            sleep(3)

            -- activate block construct/destructor
            pulse("back")

            sleep(3)
            
            --active filter from router
            pulse("left")

         end
      end
   end
end

function waitForFromRouterObject()
   while true do
      chest_contents = sorter.list(from_router_chest)
      if(next(chest_contents) == nil) then
         sleep(.5)
      else
         for id,num in pairs(chest_contents) do
            sorter.extract(from_router_chest,id,ref_repo,1)
            sorter.extract(from_router_chest,id,output_chest)
         end
      end
   end
end

print("ROUTER-RETRIEVE")
print("Press [enter] to exit.")
parallel.waitForAny(waitForRefObject, waitForFromRouterObject, waitForEnter, onOffBottom)
