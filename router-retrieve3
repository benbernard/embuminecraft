os.loadAPI('/benpi')

b = benpi.BenPI.new()
sorter = peripheral.wrap("top");

ref_chest = 1
retr_chest = 2
ref_repo = 3
redstone.setOutput("back",true)

function pulse(direction)
   redstone.setOutput(direction, false);
   redstone.setOutput(direction, true);
   sleep(.3)
   redstone.setOutput(direction, false);
   sleep(.2)
end

function onOffBottom()
   bottom = true
   while true do
      redstone.setOutput("bottom", bottom)
      sleep(2)
      bottom = not bottom
   end
end

function waitForEnter()
   read()
end

function waitForRefObject()
   while true do
      local chest_contents
      chest_contents = sorter.list(ref_chest)
      if(next(chest_contents) == nil) then
         sleep(.5)
      else
         local id,num,i,currentNum
         for id,num in pairs(chest_contents) do
            print(id)
            sorter.extract(ref_chest,id,retr_chest,num)
            currentNum = num
            for i=1,5 do
               redstone.setOutput("back",false)
               sleep(.5)
               redstone.setOutput("back",true)
               if(currentNum > 1) then
                  local half 
                  half = math.ceil(currentNum / 2)
                  sorter.extract(retr_chest,id,ref_repo,half)
                  currentNum = currentNum - half
               end
            end
            sorter.extract(retr_chest,id,ref_repo,currentNum)
            --sleep(10)
         end
      end
   end
end

redstone.setOutput("back",true)
print("ROUTER-RETRIEVE")
print("Press [enter] to exit.")
parallel.waitForAny(waitForRefObject, waitForEnter, onOffBottom)
